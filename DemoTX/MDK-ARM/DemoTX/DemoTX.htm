<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [DemoTX\DemoTX.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image DemoTX\DemoTX.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Nov 19 20:25:03 2023
<BR><P>
<H3>Maximum Stack Usage =        440 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
UART_RxISR_16BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; UART_RxCpltCallback &rArr; AT_DeviceHandle &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3d]">AES_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">AES_IRQHandler</a><BR>
 <LI><a href="#[6c]">RadioSetModem</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[80]">RadioSetPublicNetwork</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from stm32wlxx_it.o(i.ADC_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3d]">AES_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32wlxx_it.o(i.BusFault_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[1e]">C2SEV_PWR_C2H_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[1f]">COMP_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[1d]">DAC_IRQHandler</a> from stm32wlxx_it.o(i.DAC_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from stm32wlxx_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[40]">DMA2_Channel1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[41]">DMA2_Channel2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[42]">DMA2_Channel3_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[43]">DMA2_Channel4_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[44]">DMA2_Channel5_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[45]">DMA2_Channel6_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[46]">DMA2_Channel7_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[47]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32wlxx_it.o(i.DebugMon_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32wlxx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[20]">EXTI9_5_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[39]">HSEM_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32wlxx_it.o(i.HardFault_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[29]">I2C1_ER_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[28]">I2C1_EV_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2b]">I2C2_ER_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2a]">I2C2_EV_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3b]">I2C3_ER_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3a]">I2C3_EV_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[37]">IPCC_C1_RX_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[38]">IPCC_C1_TX_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[31]">LPTIM1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[32]">LPTIM2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[35]">LPTIM3_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[30]">LPUART1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32wlxx_it.o(i.MemManage_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32wlxx_it.o(i.NMI_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[54]">OnTxDone</a> from subghz_phy_app.o(i.OnTxDone) referenced from subghz_phy_app.o(i.SubghzApp_Init)
 <LI><a href="#[55]">OnTxTimeout</a> from subghz_phy_app.o(i.OnTxTimeout) referenced from subghz_phy_app.o(i.SubghzApp_Init)
 <LI><a href="#[53]">OnledEvent</a> from subghz_phy_app.o(i.OnledEvent) referenced from subghz_phy_app.o(i.SubghzApp_Init)
 <LI><a href="#[3f]">PKA_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32wlxx_it.o(i.PendSV_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3e]">RNG_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from stm32wlxx_it.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[72]">RadioCheckRfFrequency</a> from radio.o(i.RadioCheckRfFrequency) referenced from radio.o(.constdata)
 <LI><a href="#[6b]">RadioGetStatus</a> from radio.o(i.RadioGetStatus) referenced from radio.o(.constdata)
 <LI><a href="#[81]">RadioGetWakeupTime</a> from radio.o(i.RadioGetWakeupTime) referenced from radio.o(.constdata)
 <LI><a href="#[6a]">RadioInit</a> from radio.o(i.RadioInit) referenced from radio.o(.constdata)
 <LI><a href="#[82]">RadioIrqProcess</a> from radio.o(i.RadioIrqProcess) referenced from radio.o(.constdata)
 <LI><a href="#[6e]">RadioIsChannelFree</a> from radio.o(i.RadioIsChannelFree) referenced from radio.o(.constdata)
 <LI><a href="#[50]">RadioOnDioIrq</a> from radio.o(i.RadioOnDioIrq) referenced from radio.o(i.RadioInit)
 <LI><a href="#[52]">RadioOnRxTimeoutIrq</a> from radio.o(i.RadioOnRxTimeoutIrq) referenced from radio.o(i.RadioInit)
 <LI><a href="#[51]">RadioOnTxTimeoutIrq</a> from radio.o(i.RadioOnTxTimeoutIrq) referenced from radio.o(i.RadioInit)
 <LI><a href="#[6f]">RadioRandom</a> from radio.o(i.RadioRandom) referenced from radio.o(.constdata)
 <LI><a href="#[7c]">RadioRead</a> from radio.o(i.RadioRead) referenced from radio.o(.constdata)
 <LI><a href="#[7e]">RadioReadRegisters</a> from radio.o(i.RadioReadRegisters) referenced from radio.o(.constdata)
 <LI><a href="#[7a]">RadioRssi</a> from radio.o(i.RadioRssi) referenced from radio.o(.constdata)
 <LI><a href="#[77]">RadioRx</a> from radio.o(i.RadioRx) referenced from radio.o(.constdata)
 <LI><a href="#[83]">RadioRxBoosted</a> from radio.o(i.RadioRxBoosted) referenced from radio.o(.constdata)
 <LI><a href="#[74]">RadioSend</a> from radio.o(i.RadioSend) referenced from radio.o(.constdata)
 <LI><a href="#[6d]">RadioSetChannel</a> from radio.o(i.RadioSetChannel) referenced from radio.o(.constdata)
 <LI><a href="#[7f]">RadioSetMaxPayloadLength</a> from radio.o(i.RadioSetMaxPayloadLength) referenced from radio.o(.constdata)
 <LI><a href="#[6c]">RadioSetModem</a> from radio.o(i.RadioSetModem) referenced from radio.o(.constdata)
 <LI><a href="#[80]">RadioSetPublicNetwork</a> from radio.o(i.RadioSetPublicNetwork) referenced from radio.o(.constdata)
 <LI><a href="#[70]">RadioSetRxConfig</a> from radio.o(i.RadioSetRxConfig) referenced from radio.o(.constdata)
 <LI><a href="#[84]">RadioSetRxDutyCycle</a> from radio.o(i.RadioSetRxDutyCycle) referenced from radio.o(.constdata)
 <LI><a href="#[87]">RadioSetRxGenericConfig</a> from radio.o(i.RadioSetRxGenericConfig) referenced from radio.o(.constdata)
 <LI><a href="#[71]">RadioSetTxConfig</a> from radio.o(i.RadioSetTxConfig) referenced from radio.o(.constdata)
 <LI><a href="#[79]">RadioSetTxContinuousWave</a> from radio.o(i.RadioSetTxContinuousWave) referenced from radio.o(.constdata)
 <LI><a href="#[88]">RadioSetTxGenericConfig</a> from radio.o(i.RadioSetTxGenericConfig) referenced from radio.o(.constdata)
 <LI><a href="#[75]">RadioSleep</a> from radio.o(i.RadioSleep) referenced from radio.o(.constdata)
 <LI><a href="#[76]">RadioStandby</a> from radio.o(i.RadioStandby) referenced from radio.o(.constdata)
 <LI><a href="#[78]">RadioStartCad</a> from radio.o(i.RadioStartCad) referenced from radio.o(.constdata)
 <LI><a href="#[73]">RadioTimeOnAir</a> from radio.o(i.RadioTimeOnAir) referenced from radio.o(.constdata)
 <LI><a href="#[86]">RadioTxCw</a> from radio.o(i.RadioTxCw) referenced from radio.o(.constdata)
 <LI><a href="#[85]">RadioTxPrbs</a> from radio.o(i.RadioTxPrbs) referenced from radio.o(.constdata)
 <LI><a href="#[7b]">RadioWrite</a> from radio.o(i.RadioWrite) referenced from radio.o(.constdata)
 <LI><a href="#[7d]">RadioWriteRegisters</a> from radio.o(i.RadioWriteRegisters) referenced from radio.o(.constdata)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2c]">SPI1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2d]">SPI2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[36]">SUBGHZSPI_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3c]">SUBGHZ_Radio_IRQHandler</a> from stm32wlxx_it.o(i.SUBGHZ_Radio_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32wlxx_it.o(i.SVC_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32wlxx_it.o(i.SysTick_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_stm32wlxx.o(i.SystemInit) referenced from startup_stm32wl55xx_cm4.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_LSECSS_SSRU_IRQHandler</a> from stm32wlxx_it.o(i.TAMP_STAMP_LSECSS_SSRU_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[26]">TIM16_IRQHandler</a> from stm32wlxx_it.o(i.TIM16_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[27]">TIM17_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[21]">TIM1_BRK_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[24]">TIM1_CC_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[23]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[22]">TIM1_UP_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[25]">TIM2_IRQHandler</a> from stm32wlxx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[66]">TIMER_IF_BkUp_Read_Seconds</a> from timer_if.o(i.TIMER_IF_BkUp_Read_Seconds) referenced from timer_if.o(.constdata)
 <LI><a href="#[68]">TIMER_IF_BkUp_Read_SubSeconds</a> from timer_if.o(i.TIMER_IF_BkUp_Read_SubSeconds) referenced from timer_if.o(.constdata)
 <LI><a href="#[65]">TIMER_IF_BkUp_Write_Seconds</a> from timer_if.o(i.TIMER_IF_BkUp_Write_Seconds) referenced from timer_if.o(.constdata)
 <LI><a href="#[67]">TIMER_IF_BkUp_Write_SubSeconds</a> from timer_if.o(i.TIMER_IF_BkUp_Write_SubSeconds) referenced from timer_if.o(.constdata)
 <LI><a href="#[64]">TIMER_IF_Convert_Tick2ms</a> from timer_if.o(i.TIMER_IF_Convert_Tick2ms) referenced from timer_if.o(.constdata)
 <LI><a href="#[63]">TIMER_IF_Convert_ms2Tick</a> from timer_if.o(i.TIMER_IF_Convert_ms2Tick) referenced from timer_if.o(.constdata)
 <LI><a href="#[62]">TIMER_IF_GetMinimumTimeout</a> from timer_if.o(i.TIMER_IF_GetMinimumTimeout) referenced from timer_if.o(.constdata)
 <LI><a href="#[69]">TIMER_IF_GetTime</a> from timer_if.o(i.TIMER_IF_GetTime) referenced from timer_if.o(.constdata)
 <LI><a href="#[5f]">TIMER_IF_GetTimerContext</a> from timer_if.o(i.TIMER_IF_GetTimerContext) referenced from timer_if.o(.constdata)
 <LI><a href="#[60]">TIMER_IF_GetTimerElapsedTime</a> from timer_if.o(i.TIMER_IF_GetTimerElapsedTime) referenced from timer_if.o(.constdata)
 <LI><a href="#[61]">TIMER_IF_GetTimerValue</a> from timer_if.o(i.TIMER_IF_GetTimerValue) referenced from timer_if.o(.constdata)
 <LI><a href="#[5b]">TIMER_IF_Init</a> from timer_if.o(i.TIMER_IF_Init) referenced from timer_if.o(.constdata)
 <LI><a href="#[5e]">TIMER_IF_SetTimerContext</a> from timer_if.o(i.TIMER_IF_SetTimerContext) referenced from timer_if.o(.constdata)
 <LI><a href="#[5c]">TIMER_IF_StartTimer</a> from timer_if.o(i.TIMER_IF_StartTimer) referenced from timer_if.o(.constdata)
 <LI><a href="#[5d]">TIMER_IF_StopTimer</a> from timer_if.o(i.TIMER_IF_StopTimer) referenced from timer_if.o(.constdata)
 <LI><a href="#[4f]">UART_DMAAbortOnError</a> from stm32wlxx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32wlxx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[56]">UART_RxISR_16BIT</a> from stm32wlxx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32wlxx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN)
 <LI><a href="#[56]">UART_RxISR_16BIT</a> from stm32wlxx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32wlxx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[58]">UART_RxISR_16BIT_FIFOEN</a> from stm32wlxx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN) referenced from stm32wlxx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[57]">UART_RxISR_8BIT</a> from stm32wlxx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32wlxx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN)
 <LI><a href="#[57]">UART_RxISR_8BIT</a> from stm32wlxx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32wlxx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[59]">UART_RxISR_8BIT_FIFOEN</a> from stm32wlxx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN) referenced from stm32wlxx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[2e]">USART1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2f]">USART2_IRQHandler</a> from stm32wlxx_it.o(i.USART2_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32wlxx_it.o(i.UsageFault_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[4a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32wl55xx_cm4.o(.text)
 <LI><a href="#[4c]">_sbackspace</a> from _sgetc.o(.text) referenced from sscanf.o(.text)
 <LI><a href="#[4d]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[4b]">_sgetc</a> from _sgetc.o(.text) referenced from sscanf.o(.text)
 <LI><a href="#[5a]">fputc</a> from debug.o(i.fputc) referenced from printf6.o(i.__0printf$6)
 <LI><a href="#[4e]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[48]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[1a2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[89]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a0]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1a4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1a5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1a6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1a7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>C2SEV_PWR_C2H_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>HSEM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IPCC_C1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IPCC_C1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SUBGHZSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Convert_ms2Tick
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfFrequency
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubghzApp_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCfgDebug
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceHandle
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExitCapture
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StartTimer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceHandle
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a9]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceHandle
</UL>

<P><STRONG><a name="[a6]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceHandle
</UL>

<P><STRONG><a name="[91]"></a>sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceHandle
</UL>

<P><STRONG><a name="[1ab]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1ac]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1ad]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[95]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[a3]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[a2]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[9a]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[92]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>

<P><STRONG><a name="[4b]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[1ae]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[8a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1af]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>

<P><STRONG><a name="[9d]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[9f]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[9e]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[a1]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[a4]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1b0]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wlxx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DAC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(i.DAC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32wlxx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCaptureTimer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SUBGHZ_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StartTimer
</UL>

<P><STRONG><a name="[13e]"></a>GetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exit_app.o(i.GetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SubGHz_Phy_Process
</UL>

<P><STRONG><a name="[11d]"></a>HAL_DMA_Abort</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, stm32wlxx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32wlxx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>HAL_Delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sys_app.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SubGHz_Phy_Process
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[af]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exit_app.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32wlxx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>HAL_GPIO_Init</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, stm32wlxx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExitCapture
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_Init
</UL>

<P><STRONG><a name="[144]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32wlxx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnledEvent
</UL>

<P><STRONG><a name="[136]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32wlxx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_ConfigRFSwitch
</UL>

<P><STRONG><a name="[b1]"></a>HAL_GetTick</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys_app.o(i.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatency
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[18a]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b2]"></a>HAL_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32wlxx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>HAL_InitTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_app.o(i.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[10a]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32wlxx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopExitCapture
</UL>

<P><STRONG><a name="[e6]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExitCapture
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_MspInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startExitCapture
</UL>

<P><STRONG><a name="[b7]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, stm32wlxx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExitCapture
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_MspInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[b3]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[14b]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32wlxx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[bb]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[ba]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 554 bytes, Stack size 24 bytes, stm32wlxx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetUSARTClockSource
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetLPTIMClockSource
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetI2CClockSource
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 626 bytes, Stack size 16 bytes, stm32wlxx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_IsReady
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsReady
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsReady
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b4]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32wlxx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[c7]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32wlxx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c8]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32wlxx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c6]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, stm32wlxx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetN
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsEnabledRangeSelect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsEnabledDiv2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[cd]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1590 bytes, Stack size 32 bytes, stm32wlxx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_IsReady
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_Disable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_SetCalibTrimming
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsReady
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_Enable
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI_IsReady
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI_Disable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_SetCalibTrimming
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsReady
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_Enable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_DisableTcxo
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_IsEnabledBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e0]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc_ex.o(i.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[18f]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPRead))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Read_MSBticks
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Read_SubSeconds
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Read_Seconds
</UL>

<P><STRONG><a name="[190]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32wlxx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Write_MSBticks
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Write_SubSeconds
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Write_Seconds
</UL>

<P><STRONG><a name="[193]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc_ex.o(i.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_RTCEx_SSRUEventCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, timer_if.o(i.HAL_RTCEx_SSRUEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTCEx_SSRUEventCallback &rArr; TIMER_IF_BkUp_Write_MSBticks &rArr; HAL_RTCEx_BKUPWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Write_MSBticks
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Read_MSBticks
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUIRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>HAL_RTCEx_SSRUIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32wlxx_hal_rtc_ex.o(i.HAL_RTCEx_SSRUIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTCEx_SSRUIRQHandler &rArr; HAL_RTCEx_SSRUEventCallback &rArr; TIMER_IF_BkUp_Write_MSBticks &rArr; HAL_RTCEx_BKUPWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMP_STAMP_LSECSS_SSRU_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>HAL_RTCEx_SetSSRU_IT</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc_ex.o(i.HAL_RTCEx_SetSSRU_IT))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[dd]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer_if.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[df]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32wlxx_hal_rtc.o(i.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc.o(i.HAL_RTC_DeactivateAlarm))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StopTimer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>

<P><STRONG><a name="[e1]"></a>HAL_RTC_Init</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, stm32wlxx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[e2]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[e7]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 460 bytes, Stack size 28 bytes, stm32wlxx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StartTimer
</UL>

<P><STRONG><a name="[e9]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32wlxx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_WaitForSynchro &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
</UL>

<P><STRONG><a name="[fa]"></a>HAL_SUBGHZ_CADStatusCallback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, radio_driver.o(i.HAL_SUBGHZ_CADStatusCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SUBGHZ_CADStatusCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>HAL_SUBGHZ_CRCErrorCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, radio_driver.o(i.HAL_SUBGHZ_CRCErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SUBGHZ_CRCErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>HAL_SUBGHZ_ExecGetCmd</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, stm32wlxx_hal_subghz.o(i.HAL_SUBGHZ_ExecGetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SUBGHZ_ExecGetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_WaitOnBusy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Transmit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Receive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_UnselectSUBGHZSPI_NSS
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SelectSUBGHZSPI_NSS
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRxBufferStatus
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRssiInst
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPacketStatus
</UL>

<P><STRONG><a name="[f1]"></a>HAL_SUBGHZ_ExecSetCmd</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32wlxx_hal_subghz.o(i.HAL_SUBGHZ_ExecSetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_WaitOnBusy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Transmit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_UnselectSUBGHZSPI_NSS
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SelectSUBGHZSPI_NSS
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxInfinitePreamble
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxContinuousWave
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTx
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTcxoMode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStopRxTimerOnPreambleDetect
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSleep
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRxDutyCycle
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRxBoosted
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRx
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfFrequency
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRegulatorMode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPaConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetLoRaSymbNumTimeout
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCad
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetBufferBaseAddress
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_CalibrateImage
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Calibrate
</UL>

<P><STRONG><a name="[f8]"></a>HAL_SUBGHZ_HeaderErrorCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, radio_driver.o(i.HAL_SUBGHZ_HeaderErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SUBGHZ_HeaderErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>HAL_SUBGHZ_HeaderValidCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, radio_driver.o(i.HAL_SUBGHZ_HeaderValidCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SUBGHZ_HeaderValidCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>HAL_SUBGHZ_IRQHandler</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32wlxx_hal_subghz.o(i.HAL_SUBGHZ_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SUBGHZ_IRQHandler &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_TxCpltCallback
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_SyncWordValidCallback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_RxTxTimeoutCallback
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_RxCpltCallback
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_PreambleDetectedCallback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_HeaderValidCallback
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_HeaderErrorCallback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_CRCErrorCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_CADStatusCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_Radio_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>HAL_SUBGHZ_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32wlxx_hal_subghz.o(i.HAL_SUBGHZ_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SUBGHZ_Init &rArr; HAL_SUBGHZ_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_RF_DisableReset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_UnselectSUBGHZSPI_NSS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SetRadioBusyTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SUBGHZ_Init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_SUBGHZ_MspInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, subghz.o(i.HAL_SUBGHZ_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SUBGHZ_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_Init
</UL>

<P><STRONG><a name="[f5]"></a>HAL_SUBGHZ_PreambleDetectedCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, radio_driver.o(i.HAL_SUBGHZ_PreambleDetectedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SUBGHZ_PreambleDetectedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>HAL_SUBGHZ_ReadBuffer</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32wlxx_hal_subghz.o(i.HAL_SUBGHZ_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SUBGHZ_ReadBuffer &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_WaitOnBusy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Transmit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Receive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_UnselectSUBGHZSPI_NSS
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SelectSUBGHZSPI_NSS
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadBuffer
</UL>

<P><STRONG><a name="[102]"></a>HAL_SUBGHZ_ReadRegisters</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, stm32wlxx_hal_subghz.o(i.HAL_SUBGHZ_ReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_WaitOnBusy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Transmit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Receive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_UnselectSUBGHZSPI_NSS
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SelectSUBGHZSPI_NSS
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegisters
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
</UL>

<P><STRONG><a name="[f4]"></a>HAL_SUBGHZ_RxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, radio_driver.o(i.HAL_SUBGHZ_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SUBGHZ_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>HAL_SUBGHZ_RxTxTimeoutCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, radio_driver.o(i.HAL_SUBGHZ_RxTxTimeoutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SUBGHZ_RxTxTimeoutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_SUBGHZ_SyncWordValidCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, radio_driver.o(i.HAL_SUBGHZ_SyncWordValidCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SUBGHZ_SyncWordValidCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>HAL_SUBGHZ_TxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, radio_driver.o(i.HAL_SUBGHZ_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SUBGHZ_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>HAL_SUBGHZ_WriteBuffer</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, stm32wlxx_hal_subghz.o(i.HAL_SUBGHZ_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SUBGHZ_WriteBuffer &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_WaitOnBusy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Transmit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_UnselectSUBGHZSPI_NSS
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SelectSUBGHZSPI_NSS
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteBuffer
</UL>

<P><STRONG><a name="[104]"></a>HAL_SUBGHZ_WriteRegisters</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32wlxx_hal_subghz.o(i.HAL_SUBGHZ_WriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_WaitOnBusy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Transmit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_UnselectSUBGHZSPI_NSS
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SelectSUBGHZSPI_NSS
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegisters
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
</UL>

<P><STRONG><a name="[111]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>HAL_TIM_Base_DeInit</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32wlxx_hal_tim.o(i.HAL_TIM_Base_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_DeInit &rArr; HAL_TIM_Base_MspDeInit &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCaptureTimer
</UL>

<P><STRONG><a name="[107]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32wlxx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCaptureTimer
</UL>

<P><STRONG><a name="[106]"></a>HAL_TIM_Base_MspDeInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_MspDeInit &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>

<P><STRONG><a name="[108]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[130]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32wlxx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCaptureTimer
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCaptureTimer
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32wlxx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopCaptureTimer
</UL>

<P><STRONG><a name="[10c]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, stm32wlxx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; stopExitCapture &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tim_app.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; stopExitCapture &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopExitCapture
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopCaptureTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32wlxx_hal_uart_ex.o(i.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[11e]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[122]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart_ex.o(i.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32wlxx_hal_uart_ex.o(i.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[118]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32wlxx_hal_uart_ex.o(i.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[121]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart_ex.o(i.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[119]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 762 bytes, Stack size 32 bytes, stm32wlxx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>HAL_UART_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32wlxx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[124]"></a>HAL_UART_MspInit</STRONG> (Thumb, 152 bytes, Stack size 88 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[129]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32wlxx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxCpltCallback
</UL>

<P><STRONG><a name="[12b]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; UART_RxCpltCallback &rArr; AT_DeviceHandle &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[12d]"></a>HAL_UART_Transmit</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, stm32wlxx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[196]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wlxx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>InitCaptureTimer</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tim_app.o(i.InitCaptureTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitCaptureTimer &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[131]"></a>InitExitCapture</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, exit_app.o(i.InitExitCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitExitCapture &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[132]"></a>MX_DMA_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[134]"></a>MX_GPIO_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>MX_RTC_Init</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetSSRU_IT
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>

<P><STRONG><a name="[139]"></a>MX_SUBGHZ_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, subghz.o(i.MX_SUBGHZ_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_SUBGHZ_Init &rArr; HAL_SUBGHZ_Init &rArr; HAL_SUBGHZ_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[13a]"></a>MX_SubGHz_Phy_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_subghz_phy.o(i.MX_SubGHz_Phy_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_SubGHz_Phy_Init &rArr; SystemApp_Init &rArr; MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubghzApp_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>MX_SubGHz_Phy_Process</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, app_subghz_phy.o(i.MX_SubGHz_Phy_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_SubGHz_Phy_Process &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startExitCapture
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearTickCount
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTickCount
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCaptureTimer
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wlxx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wlxx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[146]"></a>RBI_ConfigRFSwitch</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, radio_board_if.o(i.RBI_ConfigRFSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RBI_ConfigRFSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSleep
</UL>

<P><STRONG><a name="[189]"></a>RBI_GetTxConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_board_if.o(i.RBI_GetTxConfig))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
</UL>

<P><STRONG><a name="[182]"></a>RBI_GetWakeUpTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_board_if.o(i.RBI_GetWakeUpTime))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRadioWakeUpTime
</UL>

<P><STRONG><a name="[147]"></a>RBI_Init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, radio_board_if.o(i.RBI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RBI_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[17b]"></a>RBI_IsDCDC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_board_if.o(i.RBI_IsDCDC))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SMPS_Set
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRegulatorMode
</UL>

<P><STRONG><a name="[183]"></a>RBI_IsTCXO</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_board_if.o(i.RBI_IsTCXO))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32wlxx_it.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[e3]"></a>RTC_EnterInitMode</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32wlxx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_EnterInitMode &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[e4]"></a>RTC_ExitInitMode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32wlxx_hal_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[100]"></a>SUBGHZSPI_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32wlxx_hal_subghz.o(i.SUBGHZSPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_Init
</UL>

<P><STRONG><a name="[ee]"></a>SUBGHZSPI_Receive</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32wlxx_hal_subghz.o(i.SUBGHZSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SUBGHZSPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadBuffer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
</UL>

<P><STRONG><a name="[ed]"></a>SUBGHZSPI_Transmit</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, stm32wlxx_hal_subghz.o(i.SUBGHZSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SUBGHZSPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteBuffer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadBuffer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
</UL>

<P><STRONG><a name="[eb]"></a>SUBGHZ_CheckDeviceReady</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32wlxx_hal_subghz.o(i.SUBGHZ_CheckDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_WaitOnBusy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_UnselectSUBGHZSPI_NSS
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SelectSUBGHZSPI_NSS
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteBuffer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadBuffer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
</UL>

<P><STRONG><a name="[3c]"></a>SUBGHZ_Radio_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32wlxx_it.o(i.SUBGHZ_Radio_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SUBGHZ_Radio_IRQHandler &rArr; HAL_SUBGHZ_IRQHandler &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>SUBGHZ_WaitOnBusy</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32wlxx_hal_subghz.o(i.SUBGHZ_WaitOnBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SUBGHZ_WaitOnBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteBuffer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadBuffer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
</UL>

<P><STRONG><a name="[17c]"></a>SUBGRF_Calibrate</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_Calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SUBGRF_Calibrate &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[17d]"></a>SUBGRF_CalibrateImage</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_CalibrateImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SUBGRF_CalibrateImage &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfFrequency
</UL>

<P><STRONG><a name="[14c]"></a>SUBGRF_GetOperatingMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_driver.o(i.SUBGRF_GetOperatingMode))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetStatus
</UL>

<P><STRONG><a name="[159]"></a>SUBGRF_GetPacketStatus</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_GetPacketStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SUBGRF_GetPacketStatus &rArr; HAL_SUBGHZ_ExecGetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[17e]"></a>SUBGRF_GetPacketType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_driver.o(i.SUBGRF_GetPacketType))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcSeed
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcPolynomial
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRxBufferStatus
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPacketStatus
</UL>

<P><STRONG><a name="[158]"></a>SUBGRF_GetPayload</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, radio_driver.o(i.SUBGRF_GetPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SUBGRF_GetPayload &rArr; SUBGRF_GetRxBufferStatus &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadBuffer
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRxBufferStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[14d]"></a>SUBGRF_GetRadioWakeUpTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio_driver.o(i.SUBGRF_GetRadioWakeUpTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SUBGRF_GetRadioWakeUpTime
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_GetWakeUpTime
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetWakeupTime
</UL>

<P><STRONG><a name="[15c]"></a>SUBGRF_GetRandom</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_GetRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SUBGRF_GetRandom &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRx
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegisters
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
</UL>

<P><STRONG><a name="[15e]"></a>SUBGRF_GetRssiInst</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_GetRssiInst))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SUBGRF_GetRssiInst &rArr; HAL_SUBGHZ_ExecGetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRssi
</UL>

<P><STRONG><a name="[180]"></a>SUBGRF_GetRxBufferStatus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_GetRxBufferStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SUBGRF_GetRxBufferStatus &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPayload
</UL>

<P><STRONG><a name="[14e]"></a>SUBGRF_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SUBGRF_Init &rArr; Radio_SMPS_Set &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SUBGHZ_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SMPS_Set
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_IsTCXO
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_GetWakeUpTime
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTcxoMode
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Calibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[181]"></a>SUBGRF_ReadBuffer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SUBGRF_ReadBuffer &rArr; HAL_SUBGHZ_ReadBuffer &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPayload
</UL>

<P><STRONG><a name="[157]"></a>SUBGRF_ReadRegister</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SMPS_Set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRead
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRxBufferStatus
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRandom
</UL>

<P><STRONG><a name="[15d]"></a>SUBGRF_ReadRegisters</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_ReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SUBGRF_ReadRegisters &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioReadRegisters
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRandom
</UL>

<P><STRONG><a name="[164]"></a>SUBGRF_SendPayload</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_SendPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SUBGRF_SendPayload &rArr; SUBGRF_SetPayload &rArr; SUBGRF_WriteBuffer &rArr; HAL_SUBGHZ_WriteBuffer &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTx
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPayload
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[150]"></a>SUBGRF_SetBufferBaseAddress</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_SetBufferBaseAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SUBGRF_SetBufferBaseAddress &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[173]"></a>SUBGRF_SetCad</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, radio_driver.o(i.SUBGRF_SetCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SUBGRF_SetCad &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStartCad
</UL>

<P><STRONG><a name="[16f]"></a>SUBGRF_SetCrcPolynomial</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_SetCrcPolynomial))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SUBGRF_SetCrcPolynomial &rArr; SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegisters
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
</UL>

<P><STRONG><a name="[186]"></a>SUBGRF_SetCrcSeed</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_SetCrcSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SUBGRF_SetCrcSeed &rArr; SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegisters
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
</UL>

<P><STRONG><a name="[152]"></a>SUBGRF_SetDioIrqParams</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, radio_driver.o(i.SUBGRF_SetDioIrqParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SUBGRF_SetDioIrqParams &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStartCad
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[16d]"></a>SUBGRF_SetLoRaSymbNumTimeout</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, radio_driver.o(i.SUBGRF_SetLoRaSymbNumTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SUBGRF_SetLoRaSymbNumTimeout &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[16a]"></a>SUBGRF_SetModulationParams</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, radio_driver.o(i.SUBGRF_SetModulationParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SUBGRF_SetModulationParams &rArr; SUBGRF_SetPacketType &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[187]"></a>SUBGRF_SetPaConfig</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, radio_driver.o(i.SUBGRF_SetPaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SUBGRF_SetPaConfig &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
</UL>

<P><STRONG><a name="[163]"></a>SUBGRF_SetPacketParams</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, radio_driver.o(i.SUBGRF_SetPacketParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SUBGRF_SetPacketParams &rArr; SUBGRF_SetCrcSeed &rArr; SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcSeed
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcPolynomial
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetMaxPayloadLength
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[167]"></a>SUBGRF_SetPacketType</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, radio_driver.o(i.SUBGRF_SetPacketType))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SUBGRF_SetPacketType &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
</UL>

<P><STRONG><a name="[185]"></a>SUBGRF_SetPayload</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_SetPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SUBGRF_SetPayload &rArr; SUBGRF_WriteBuffer &rArr; HAL_SUBGHZ_WriteBuffer &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SendPayload
</UL>

<P><STRONG><a name="[14f]"></a>SUBGRF_SetRegulatorMode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, radio_driver.o(i.SUBGRF_SetRegulatorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SUBGRF_SetRegulatorMode &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_IsDCDC
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[166]"></a>SUBGRF_SetRfFrequency</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, radio_driver.o(i.SUBGRF_SetRfFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SUBGRF_SetRfFrequency &rArr; SUBGRF_CalibrateImage &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_CalibrateImage
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetChannel
</UL>

<P><STRONG><a name="[170]"></a>SUBGRF_SetRfTxPower</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_SetRfTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SUBGRF_SetRfTxPower &rArr; SUBGRF_SetTxParams &rArr; SUBGRF_SetPaConfig &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_GetTxConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxCw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
</UL>

<P><STRONG><a name="[161]"></a>SUBGRF_SetRx</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SUBGRF_SetRx &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRandom
</UL>

<P><STRONG><a name="[162]"></a>SUBGRF_SetRxBoosted</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_SetRxBoosted))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SUBGRF_SetRxBoosted &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
</UL>

<P><STRONG><a name="[16e]"></a>SUBGRF_SetRxDutyCycle</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, radio_driver.o(i.SUBGRF_SetRxDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SUBGRF_SetRxDutyCycle &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxDutyCycle
</UL>

<P><STRONG><a name="[172]"></a>SUBGRF_SetSleep</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SUBGRF_SetSleep &rArr; Radio_SMPS_Set &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SMPS_Set
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_ConfigRFSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
</UL>

<P><STRONG><a name="[155]"></a>SUBGRF_SetStandby</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, radio_driver.o(i.SUBGRF_SetStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SUBGRF_SetStandby &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRandom
</UL>

<P><STRONG><a name="[168]"></a>SUBGRF_SetStopRxTimerOnPreambleDetect</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, radio_driver.o(i.SUBGRF_SetStopRxTimerOnPreambleDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SUBGRF_SetStopRxTimerOnPreambleDetect &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[160]"></a>SUBGRF_SetSwitch</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_SetSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SUBGRF_SetSwitch &rArr; Radio_SMPS_Set &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SMPS_Set
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_ConfigRFSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPrbs
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxCw
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxDutyCycle
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
</UL>

<P><STRONG><a name="[16b]"></a>SUBGRF_SetSyncWord</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, radio_driver.o(i.SUBGRF_SetSyncWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SUBGRF_SetSyncWord &rArr; SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[184]"></a>SUBGRF_SetTcxoMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_SetTcxoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SUBGRF_SetTcxoMode &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[178]"></a>SUBGRF_SetTx</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SUBGRF_SetTx &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPrbs
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SendPayload
</UL>

<P><STRONG><a name="[171]"></a>SUBGRF_SetTxContinuousWave</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, radio_driver.o(i.SUBGRF_SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SUBGRF_SetTxContinuousWave &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxCw
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
</UL>

<P><STRONG><a name="[177]"></a>SUBGRF_SetTxInfinitePreamble</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, radio_driver.o(i.SUBGRF_SetTxInfinitePreamble))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SUBGRF_SetTxInfinitePreamble &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPrbs
</UL>

<P><STRONG><a name="[151]"></a>SUBGRF_SetTxParams</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, radio_driver.o(i.SUBGRF_SetTxParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SUBGRF_SetTxParams &rArr; SUBGRF_SetPaConfig &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPaConfig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
</UL>

<P><STRONG><a name="[16c]"></a>SUBGRF_SetWhiteningSeed</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_SetWhiteningSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SUBGRF_SetWhiteningSeed &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[188]"></a>SUBGRF_WriteBuffer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SUBGRF_WriteBuffer &rArr; HAL_SUBGHZ_WriteBuffer &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPayload
</UL>

<P><STRONG><a name="[156]"></a>SUBGRF_WriteRegister</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SMPS_Set
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWrite
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRxBoosted
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetLoRaSymbNumTimeout
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRandom
</UL>

<P><STRONG><a name="[179]"></a>SUBGRF_WriteRegisters</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, radio_driver.o(i.SUBGRF_WriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWriteRegisters
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSyncWord
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcSeed
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcPolynomial
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[141]"></a>StartCaptureTimer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tim_app.o(i.StartCaptureTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StartCaptureTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SubGHz_Phy_Process
</UL>

<P><STRONG><a name="[13c]"></a>SubghzApp_Init</STRONG> (Thumb, 514 bytes, Stack size 56 bytes, subghz_phy_app.o(i.SubghzApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SubghzApp_Init &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Create
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SubGHz_Phy_Init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wlxx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[13b]"></a>SystemApp_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sys_app.o(i.SystemApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemApp_Init &rArr; MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExitCapture
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCaptureTimer
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SubGHz_Phy_Init
</UL>

<P><STRONG><a name="[18e]"></a>SystemClock_Config</STRONG> (Thumb, 152 bytes, Stack size 112 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32wlxx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_LSECSS_SSRU_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32wlxx_it.o(i.TAMP_STAMP_LSECSS_SSRU_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TAMP_STAMP_LSECSS_SSRU_IRQHandler &rArr; HAL_RTCEx_SSRUIRQHandler &rArr; HAL_RTCEx_SSRUEventCallback &rArr; TIMER_IF_BkUp_Write_MSBticks &rArr; HAL_RTCEx_BKUPWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM16_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32wlxx_it.o(i.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM16_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; stopExitCapture &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(i.TIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIMER_IF_BkUp_Read_Seconds</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer_if.o(i.TIMER_IF_BkUp_Read_Seconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_IF_BkUp_Read_Seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>TIMER_IF_BkUp_Read_SubSeconds</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer_if.o(i.TIMER_IF_BkUp_Read_SubSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_IF_BkUp_Read_SubSeconds
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>TIMER_IF_BkUp_Write_Seconds</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer_if.o(i.TIMER_IF_BkUp_Write_Seconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_IF_BkUp_Write_Seconds &rArr; HAL_RTCEx_BKUPWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>TIMER_IF_BkUp_Write_SubSeconds</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer_if.o(i.TIMER_IF_BkUp_Write_SubSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_IF_BkUp_Write_SubSeconds &rArr; HAL_RTCEx_BKUPWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>TIMER_IF_Convert_Tick2ms</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer_if.o(i.TIMER_IF_Convert_Tick2ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_IF_Convert_Tick2ms
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_GetTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>TIMER_IF_Convert_ms2Tick</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, timer_if.o(i.TIMER_IF_Convert_ms2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_DelayMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>TIMER_IF_DelayMs</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer_if.o(i.TIMER_IF_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicks
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Convert_ms2Tick
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[62]"></a>TIMER_IF_GetMinimumTimeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer_if.o(i.TIMER_IF_GetMinimumTimeout))
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>TIMER_IF_GetTime</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, timer_if.o(i.TIMER_IF_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER_IF_GetTime &rArr; TIMER_IF_BkUp_Read_MSBticks
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Read_MSBticks
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicks
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Convert_Tick2ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>TIMER_IF_GetTimerContext</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer_if.o(i.TIMER_IF_GetTimerContext))
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>TIMER_IF_GetTimerElapsedTime</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer_if.o(i.TIMER_IF_GetTimerElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_IF_GetTimerElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>TIMER_IF_GetTimerValue</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer_if.o(i.TIMER_IF_GetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>TIMER_IF_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, timer_if.o(i.TIMER_IF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIMER_IF_Init &rArr; MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Write_MSBticks
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StopTimer
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_SetTimerContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>TIMER_IF_SetTimerContext</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer_if.o(i.TIMER_IF_SetTimerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_IF_SetTimerContext
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>TIMER_IF_StartTimer</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, timer_if.o(i.TIMER_IF_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TIMER_IF_StartTimer &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StopTimer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>TIMER_IF_StopTimer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer_if.o(i.TIMER_IF_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_IF_StopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StartTimer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32wlxx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[19a]"></a>TimerExists</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32_timer.o(i.TimerExists))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
</UL>

<P><STRONG><a name="[194]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32_timer.o(i.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>

<P><STRONG><a name="[19b]"></a>TimerInsertTimer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32_timer.o(i.TimerInsertTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerInsertTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>

<P><STRONG><a name="[195]"></a>TimerSetTimeout</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32_timer.o(i.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_IRQ_Handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>

<P><STRONG><a name="[126]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[127]"></a>UART_CheckIdleState</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32wlxx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[12c]"></a>UART_RxCpltCallback</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, debug.o(i.UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = UART_RxCpltCallback &rArr; AT_DeviceHandle &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[125]"></a>UART_SetConfig</STRONG> (Thumb, 776 bytes, Stack size 48 bytes, stm32wlxx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockSource
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[12a]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, stm32wlxx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[12e]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32wlxx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[2f]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32wlxx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[18c]"></a>UTIL_LPM_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_lpm.o(i.UTIL_LPM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[18d]"></a>UTIL_LPM_SetOffMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32_lpm.o(i.UTIL_LPM_SetOffMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_LPM_SetOffMode
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[17f]"></a>UTIL_MEM_set_8</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32_mem.o(i.UTIL_MEM_set_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UTIL_MEM_set_8
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPacketStatus
</UL>

<P><STRONG><a name="[153]"></a>UTIL_TIMER_Create</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, stm32_timer.o(i.UTIL_TIMER_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UTIL_TIMER_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubghzApp_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[15a]"></a>UTIL_TIMER_GetCurrentTime</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32_timer.o(i.UTIL_TIMER_GetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_TIMER_GetCurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[15b]"></a>UTIL_TIMER_GetElapsedTime</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32_timer.o(i.UTIL_TIMER_GetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[de]"></a>UTIL_TIMER_IRQ_Handler</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32_timer.o(i.UTIL_TIMER_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>

<P><STRONG><a name="[18b]"></a>UTIL_TIMER_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32_timer.o(i.UTIL_TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_TIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[15f]"></a>UTIL_TIMER_SetPeriod</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32_timer.o(i.UTIL_TIMER_SetPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UTIL_TIMER_SetPeriod &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerExists
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
</UL>

<P><STRONG><a name="[145]"></a>UTIL_TIMER_Start</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, stm32_timer.o(i.UTIL_TIMER_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertTimer
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerExists
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_IRQ_Handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnledEvent
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubghzApp_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
</UL>

<P><STRONG><a name="[154]"></a>UTIL_TIMER_Stop</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, stm32_timer.o(i.UTIL_TIMER_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UTIL_TIMER_Stop &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wlxx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[19c]"></a>__0printf$6</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b1]"></a>__1printf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)

<P><STRONG><a name="[a8]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SubGHz_Phy_Process
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimeout
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDone
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubghzApp_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCfgDebug
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceHandle
</UL>

<P><STRONG><a name="[1b2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9b]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[13f]"></a>clearTickCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exit_app.o(i.clearTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SubGHz_Phy_Process
</UL>

<P><STRONG><a name="[5a]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, debug.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0printf$6)
</UL>
<P><STRONG><a name="[48]"></a>main</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SubGHz_Phy_Process
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SubGHz_Phy_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a7]"></a>os_time_get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, debug.o(i.os_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_time_get &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SubGHz_Phy_Process
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimeout
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDone
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubghzApp_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCfgDebug
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceHandle
</UL>

<P><STRONG><a name="[140]"></a>startExitCapture</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, exit_app.o(i.startExitCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = startExitCapture
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SubGHz_Phy_Process
</UL>

<P><STRONG><a name="[115]"></a>stopCaptureTimer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tim_app.o(i.stopCaptureTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stopCaptureTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[114]"></a>stopExitCapture</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, exit_app.o(i.stopExitCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stopExitCapture &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[135]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(i.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[133]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dma.o(i.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[191]"></a>GetTimerTicks</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer_if.o(i.GetTimerTicks))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_GetTimerValue
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_DelayMs
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_SetTimerContext
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_GetTimerElapsedTime
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_GetTime
</UL>

<P><STRONG><a name="[da]"></a>TIMER_IF_BkUp_Read_MSBticks</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer_if.o(i.TIMER_IF_BkUp_Read_MSBticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_IF_BkUp_Read_MSBticks
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_GetTime
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUEventCallback
</UL>

<P><STRONG><a name="[db]"></a>TIMER_IF_BkUp_Write_MSBticks</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer_if.o(i.TIMER_IF_BkUp_Write_MSBticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_IF_BkUp_Write_MSBticks &rArr; HAL_RTCEx_BKUPWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUEventCallback
</UL>

<P><STRONG><a name="[d6]"></a>LL_PWR_IsEnabledBkUpAccess</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_PWR_IsEnabledBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[14a]"></a>LL_RCC_GetAHB3Prescaler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_GetAHB3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[c5]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[d2]"></a>LL_RCC_HSE_DisableTcxo</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_HSE_DisableTcxo))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[d1]"></a>LL_RCC_HSE_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_HSE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[cb]"></a>LL_RCC_HSE_IsEnabledDiv2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_HSE_IsEnabledDiv2))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[c1]"></a>LL_RCC_HSE_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_HSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[c4]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[d3]"></a>LL_RCC_HSI_SetCalibTrimming</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_HSI_SetCalibTrimming))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[d7]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[d4]"></a>LL_RCC_LSI_Disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_LSI_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[d5]"></a>LL_RCC_LSI_IsReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_LSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[d0]"></a>LL_RCC_MSI_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_MSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[ca]"></a>LL_RCC_MSI_IsEnabledRangeSelect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_MSI_IsEnabledRangeSelect))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[c3]"></a>LL_RCC_MSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_MSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[cf]"></a>LL_RCC_MSI_SetCalibTrimming</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_MSI_SetCalibTrimming))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[d8]"></a>LL_RCC_PLL_Disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_PLL_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[c9]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[cc]"></a>LL_RCC_PLL_GetN</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_PLL_GetN))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[c2]"></a>LL_RCC_PLL_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(i.LL_RCC_PLL_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[149]"></a>RCC_SetFlashLatency</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, stm32wlxx_hal_rcc.o(i.RCC_SetFlashLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RCC_SetFlashLatency &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[ce]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, stm32wlxx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatency
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAHB3Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[bc]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(i.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[bf]"></a>LL_RCC_SetI2CClockSource</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(i.LL_RCC_SetI2CClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[be]"></a>LL_RCC_SetLPTIMClockSource</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(i.LL_RCC_SetLPTIMClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[bd]"></a>LL_RCC_SetUSARTClockSource</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(i.LL_RCC_SetUSARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[b8]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[b9]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32wlxx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[ec]"></a>LL_PWR_SelectSUBGHZSPI_NSS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_subghz.o(i.LL_PWR_SelectSUBGHZSPI_NSS))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteBuffer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadBuffer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
</UL>

<P><STRONG><a name="[ff]"></a>LL_PWR_SetRadioBusyTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_subghz.o(i.LL_PWR_SetRadioBusyTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_Init
</UL>

<P><STRONG><a name="[ef]"></a>LL_PWR_UnselectSUBGHZSPI_NSS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_subghz.o(i.LL_PWR_UnselectSUBGHZSPI_NSS))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteBuffer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadBuffer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
</UL>

<P><STRONG><a name="[fe]"></a>LL_RCC_RF_DisableReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_subghz.o(i.LL_RCC_RF_DisableReset))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_Init
</UL>

<P><STRONG><a name="[197]"></a>LL_RCC_GetUSARTClockSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(i.LL_RCC_GetUSARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[4f]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32wlxx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[11a]"></a>UART_EndRxTransfer</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32wlxx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32wlxx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; UART_RxCpltCallback &rArr; AT_DeviceHandle &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32wlxx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN)
<LI> stm32wlxx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[58]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, stm32wlxx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = UART_RxISR_16BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; UART_RxCpltCallback &rArr; AT_DeviceHandle &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[57]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32wlxx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; UART_RxCpltCallback &rArr; AT_DeviceHandle &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32wlxx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN)
<LI> stm32wlxx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[59]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, stm32wlxx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = UART_RxISR_8BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; UART_RxCpltCallback &rArr; AT_DeviceHandle &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[117]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32wlxx_hal_uart_ex.o(i.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[a5]"></a>AT_DeviceHandle</STRONG> (Thumb, 444 bytes, Stack size 120 bytes, debug.o(i.AT_DeviceHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = AT_DeviceHandle &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCfgDebug
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxCpltCallback
</UL>

<P><STRONG><a name="[ab]"></a>OnCfgDebug</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, debug.o(i.OnCfgDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OnCfgDebug &rArr; os_time_get &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceHandle
</UL>

<P><STRONG><a name="[b0]"></a>IncTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit_app.o(i.IncTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[54]"></a>OnTxDone</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, subghz_phy_app.o(i.OnTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OnTxDone &rArr; os_time_get &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> subghz_phy_app.o(i.SubghzApp_Init)
</UL>
<P><STRONG><a name="[55]"></a>OnTxTimeout</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, subghz_phy_app.o(i.OnTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OnTxTimeout &rArr; os_time_get &rArr; HAL_GetTick &rArr; TIMER_IF_GetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> subghz_phy_app.o(i.SubghzApp_Init)
</UL>
<P><STRONG><a name="[53]"></a>OnledEvent</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, subghz_phy_app.o(i.OnledEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OnledEvent &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> subghz_phy_app.o(i.SubghzApp_Init)
</UL>
<P><STRONG><a name="[148]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, radio_board_if.o(i.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_Init
</UL>

<P><STRONG><a name="[17a]"></a>Radio_SMPS_Set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, radio_driver.o(i.Radio_SMPS_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Radio_SMPS_Set &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_IsDCDC
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSleep
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[72]"></a>RadioCheckRfFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio.o(i.RadioCheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>RadioGetFskBandwidthRegValue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, radio.o(i.RadioGetFskBandwidthRegValue))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[174]"></a>RadioGetGfskTimeOnAirNumerator</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, radio.o(i.RadioGetGfskTimeOnAirNumerator))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RadioGetGfskTimeOnAirNumerator
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
</UL>

<P><STRONG><a name="[176]"></a>RadioGetLoRaBandwidthInHz</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, radio.o(i.RadioGetLoRaBandwidthInHz))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
</UL>

<P><STRONG><a name="[175]"></a>RadioGetLoRaTimeOnAirNumerator</STRONG> (Thumb, 176 bytes, Stack size 36 bytes, radio.o(i.RadioGetLoRaTimeOnAirNumerator))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RadioGetLoRaTimeOnAirNumerator
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
</UL>

<P><STRONG><a name="[6b]"></a>RadioGetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, radio.o(i.RadioGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RadioGetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetOperatingMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>RadioGetWakeupTime</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, radio.o(i.RadioGetWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RadioGetWakeupTime &rArr; SUBGRF_GetRadioWakeUpTime
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRadioWakeUpTime
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>RadioInit</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, radio.o(i.RadioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RadioInit &rArr; RadioSleep &rArr; SUBGRF_SetSleep &rArr; Radio_SMPS_Set &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Create
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRegulatorMode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetBufferBaseAddress
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>RadioIrqProcess</STRONG> (Thumb, 526 bytes, Stack size 16 bytes, radio.o(i.RadioIrqProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RadioIrqProcess &rArr; SUBGRF_GetPayload &rArr; SUBGRF_GetRxBufferStatus &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPayload
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPacketStatus
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetOperatingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioOnDioIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>RadioIsChannelFree</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, radio.o(i.RadioIsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = RadioIsChannelFree &rArr; RadioSetRxConfig &rArr; SUBGRF_SetPacketParams &rArr; SUBGRF_SetCrcSeed &rArr; SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetElapsedTime
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetChannel
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRssi
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetWakeupTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>RadioOnDioIrq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, radio.o(i.RadioOnDioIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RadioOnDioIrq &rArr; RadioIrqProcess &rArr; SUBGRF_GetPayload &rArr; SUBGRF_GetRxBufferStatus &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioInit)
</UL>
<P><STRONG><a name="[52]"></a>RadioOnRxTimeoutIrq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, radio.o(i.RadioOnRxTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RadioOnRxTimeoutIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioInit)
</UL>
<P><STRONG><a name="[51]"></a>RadioOnTxTimeoutIrq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, radio.o(i.RadioOnTxTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RadioOnTxTimeoutIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioInit)
</UL>
<P><STRONG><a name="[6f]"></a>RadioRandom</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, radio.o(i.RadioRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RadioRandom &rArr; RadioSetModem &rArr;  RadioSetPublicNetwork (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRandom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>RadioRead</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, radio.o(i.RadioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RadioRead &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>RadioReadRegisters</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, radio.o(i.RadioReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RadioReadRegisters &rArr; SUBGRF_ReadRegisters &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>RadioRssi</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, radio.o(i.RadioRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RadioRssi &rArr; SUBGRF_GetRssiInst &rArr; HAL_SUBGHZ_ExecGetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRssiInst
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>RadioRx</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, radio.o(i.RadioRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RadioRx &rArr; SUBGRF_SetSwitch &rArr; Radio_SMPS_Set &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>RadioRxBoosted</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, radio.o(i.RadioRxBoosted))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RadioRxBoosted &rArr; SUBGRF_SetSwitch &rArr; Radio_SMPS_Set &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRxBoosted
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>RadioSend</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, radio.o(i.RadioSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RadioSend &rArr; SUBGRF_SetPacketParams &rArr; SUBGRF_SetCrcSeed &rArr; SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;payload_integration
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWrite
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SendPayload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>RadioSetChannel</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, radio.o(i.RadioSetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RadioSetChannel &rArr; SUBGRF_SetRfFrequency &rArr; SUBGRF_CalibrateImage &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>RadioSetMaxPayloadLength</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, radio.o(i.RadioSetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RadioSetMaxPayloadLength &rArr; SUBGRF_SetPacketParams &rArr; SUBGRF_SetCrcSeed &rArr; SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>RadioSetModem</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, radio.o(i.RadioSetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + In Cycle
<LI>Call Chain = RadioSetModem &rArr;  RadioSetPublicNetwork (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>RadioSetPublicNetwork</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, radio.o(i.RadioSetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RadioSetPublicNetwork &rArr; RadioSetModem &rArr;  RadioSetPublicNetwork (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>RadioSetRxConfig</STRONG> (Thumb, 812 bytes, Stack size 56 bytes, radio.o(i.RadioSetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RadioSetRxConfig &rArr; SUBGRF_SetPacketParams &rArr; SUBGRF_SetCrcSeed &rArr; SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWrite
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRead
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetFskBandwidthRegValue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSyncWord
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStopRxTimerOnPreambleDetect
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetLoRaSymbNumTimeout
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>RadioSetRxDutyCycle</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, radio.o(i.RadioSetRxDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RadioSetRxDutyCycle &rArr; SUBGRF_SetSwitch &rArr; Radio_SMPS_Set &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRxDutyCycle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>RadioSetRxGenericConfig</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, radio.o(i.RadioSetRxGenericConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RadioSetRxGenericConfig &rArr; SUBGRF_SetPacketParams &rArr; SUBGRF_SetCrcSeed &rArr; SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetFskBandwidthRegValue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSyncWord
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStopRxTimerOnPreambleDetect
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetLoRaSymbNumTimeout
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcPolynomial
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>RadioSetTxConfig</STRONG> (Thumb, 490 bytes, Stack size 48 bytes, radio.o(i.RadioSetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RadioSetTxConfig &rArr; SUBGRF_SetRfTxPower &rArr; SUBGRF_SetTxParams &rArr; SUBGRF_SetPaConfig &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetFskBandwidthRegValue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSyncWord
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>RadioSetTxContinuousWave</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, radio.o(i.RadioSetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RadioSetTxContinuousWave &rArr; SUBGRF_SetRfTxPower &rArr; SUBGRF_SetTxParams &rArr; SUBGRF_SetPaConfig &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxContinuousWave
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfFrequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>RadioSetTxGenericConfig</STRONG> (Thumb, 548 bytes, Stack size 32 bytes, radio.o(i.RadioSetTxGenericConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RadioSetTxGenericConfig &rArr; SUBGRF_SetRfTxPower &rArr; SUBGRF_SetTxParams &rArr; SUBGRF_SetPaConfig &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetFskBandwidthRegValue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSyncWord
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcPolynomial
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>RadioSleep</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, radio.o(i.RadioSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RadioSleep &rArr; SUBGRF_SetSleep &rArr; Radio_SMPS_Set &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>RadioStandby</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, radio.o(i.RadioStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RadioStandby &rArr; SUBGRF_SetStandby &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>RadioStartCad</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, radio.o(i.RadioStartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RadioStartCad &rArr; SUBGRF_SetDioIrqParams &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>RadioTimeOnAir</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, radio.o(i.RadioTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RadioTimeOnAir &rArr; RadioGetLoRaTimeOnAirNumerator
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetLoRaTimeOnAirNumerator
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetLoRaBandwidthInHz
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetGfskTimeOnAirNumerator
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>RadioTxCw</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, radio.o(i.RadioTxCw))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RadioTxCw &rArr; SUBGRF_SetRfTxPower &rArr; SUBGRF_SetTxParams &rArr; SUBGRF_SetPaConfig &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxContinuousWave
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>RadioTxPrbs</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, radio.o(i.RadioTxPrbs))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RadioTxPrbs &rArr; SUBGRF_SetSwitch &rArr; Radio_SMPS_Set &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxInfinitePreamble
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTx
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>RadioWrite</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, radio.o(i.RadioWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RadioWrite &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>RadioWriteRegisters</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, radio.o(i.RadioWriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RadioWriteRegisters &rArr; SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZ_CheckDeviceReady &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>payload_integration</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, radio.o(i.payload_integration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = payload_integration
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[198]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_lpm.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
</UL>

<P><STRONG><a name="[199]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_lpm.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
</UL>

<P><STRONG><a name="[19d]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$6
</UL>

<P><STRONG><a name="[1a0]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[96]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[4d]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
